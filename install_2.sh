#!/bin/bash

# Arch Linux Installation Script
# Author: Generated by AI
# Description: Installs Arch Linux with SSD+HDD btrfs setup, swap, user, Awesome WM, virtualization tools, etc.
# Logs all actions to /var/log/arch_install.log

# --- Configuration Variables ---
SSD_DEVICE="/dev/nvme0n1"          # Change this to your SSD device
HDD_DEVICE="/dev/sda"              # Change this to your HDD device
HOSTNAME="archbox"
USERNAME="vkrupenich"
USER_PASS="qwerty123"
ROOT_PASS="qwerty222"
TIMEZONE="Europe/Samara"           # Changed to Samara timezone
LANG="en_US.UTF-8"
KEYMAP="us"                        # Base keymap
ADDITIONAL_KEYMAP="ru"             # Russian keymap added

# --- Logging Setup ---
exec > >(tee -a /var/log/arch_install.log) 2>&1
echo "=== Starting Arch Linux Installation $(date) ==="

# --- Pre-installation Checks ---
echo "[INFO] Running pre-installation checks..."

# Check internet connection
if ! ping -c 3 archlinux.org &>/dev/null; then
    echo "[ERROR] No internet connection detected. Please connect to the internet."
    exit 1
fi

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo "[ERROR] This script must be run as root" 
   exit 1
fi

# Check if devices exist
if [[ ! -e $SSD_DEVICE ]]; then
    echo "[ERROR] SSD device $SSD_DEVICE not found"
    exit 1
fi

if [[ ! -e $HDD_DEVICE ]]; then
    echo "[ERROR] HDD device $HDD_DEVICE not found"
    exit 1
fi

# Confirm before proceeding
read -p "WARNING: This will erase all data on $SSD_DEVICE and $HDD_DEVICE. Continue? (y/N) " confirm
if [[ $confirm != "y" && $confirm != "Y" ]]; then
    echo "[INFO] Installation aborted by user."
    exit 0
fi

# --- Disk Partitioning & Formatting ---
echo "[INFO] Partitioning disks..."

# SSD Partitioning (GPT)
parted -s $SSD_DEVICE mklabel gpt
parted -s $SSD_DEVICE mkpart primary fat32 1MiB 513MiB
parted -s $SSD_DEVICE set 1 esp on
parted -s $SSD_DEVICE mkpart primary btrfs 513MiB 100%

# HDD Partitioning (GPT)
parted -s $HDD_DEVICE mklabel gpt
parted -s $HDD_DEVICE mkpart primary linux-swap 1MiB 9GiB       # 8GB swap
parted -s $HDD_DEVICE mkpart primary btrfs 9GiB 100%

# Format partitions
echo "[INFO] Formatting partitions..."
mkfs.fat -F32 ${SSD_DEVICE}1
mkfs.btrfs -f ${SSD_DEVICE}2
mkswap ${HDD_DEVICE}1
mkfs.btrfs -f ${HDD_DEVICE}2

# Enable swap
echo "[INFO] Enabling swap..."
swapon ${HDD_DEVICE}1

# --- BTRFS Setup ---
echo "[INFO] Configuring BTRFS..."

# Mount root partition
mount ${SSD_DEVICE}2 /mnt

# Create BTRFS subvolumes
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@snapshots
btrfs subvolume create /mnt/@var_log

# Unmount to remount with subvolumes
umount /mnt

# Mount with subvolumes
mount -o noatime,compress=zstd,space_cache=v2,subvol=@ ${SSD_DEVICE}2 /mnt
mkdir -p /mnt/{home,.snapshots,var/log,boot,mnt/hdd}
mount -o noatime,compress=zstd,space_cache=v2,subvol=@home ${SSD_DEVICE}2 /mnt/home
mount -o noatime,compress=zstd,space_cache=v2,subvol=@snapshots ${SSD_DEVICE}2 /mnt/.snapshots
mount -o noatime,compress=zstd,space_cache=v2,subvol=@var_log ${SSD_DEVICE}2 /mnt/var/log
mount ${SSD_DEVICE}1 /mnt/boot

# Mount HDD data partition
mount -o noatime,compress=zstd,space_cache=v2 ${HDD_DEVICE}2 /mnt/mnt/hdd

# --- Base System Installation ---
echo "[INFO] Installing base system..."
pacstrap /mnt base base-devel linux linux-firmware btrfs-progs

# Generate fstab
echo "[INFO] Generating fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

# Add swap entry to fstab
echo "${HDD_DEVICE}1 none swap defaults 0 0" >> /mnt/etc/fstab

# --- Chroot Setup ---
echo "[INFO] Configuring system in chroot..."

# Create chroot script
cat <<EOF > /mnt/root/chroot_script.sh
#!/bin/bash

# --- Basic System Configuration ---
echo "[CHROOT] Configuring system..."
ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
hwclock --systohc

echo "LANG=$LANG" > /etc/locale.conf
echo "KEYMAP=$KEYMAP" > /etc/vconsole.conf
echo "$HOSTNAME" > /etc/hostname

# Locale generation
sed -i "s/#$LANG/$LANG/" /etc/locale.gen
locale-gen

# Set up Russian keymap
echo "KEYMAP=$KEYMAP" > /etc/vconsole.conf
echo "KEYMAP=$ADDITIONAL_KEYMAP" >> /etc/vconsole.conf
echo "KEYMAP_TOGGLE=$KEYMAP,$ADDITIONAL_KEYMAP" >> /etc/vconsole.conf

# Hosts file
cat > /etc/hosts <<HOSTS_EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
HOSTS_EOF

# --- User Setup ---
echo "[CHROOT] Setting up users..."
echo "root:$ROOT_PASS" | chpasswd
useradd -m -G wheel -s /bin/bash $USERNAME
echo "$USERNAME:$USER_PASS" | chpasswd

# Sudo setup
echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers

# --- Bootloader Installation ---
echo "[CHROOT] Installing GRUB..."
pacman -S --noconfirm grub efibootmgr
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg

# --- Network Setup ---
echo "[CHROOT] Configuring network..."
pacman -S --noconfirm networkmanager
systemctl enable NetworkManager

# --- Desktop Environment ---
echo "[CHROOT] Installing Awesome WM..."
pacman -S --noconfirm xorg-server xorg-xinit awesome lightdm lightdm-gtk-greeter xorg-xkbcomp xorg-setxkbmap
systemctl enable lightdm

# Configure keyboard layout in X11
mkdir -p /etc/X11/xorg.conf.d
cat > /etc/X11/xorg.conf.d/00-keyboard.conf <<XKB_EOF
Section "InputClass"
    Identifier "system-keyboard"
    MatchIsKeyboard "on"
    Option "XkbLayout" "$KEYMAP,$ADDITIONAL_KEYMAP"
    Option "XkbModel" "pc105"
    Option "XkbOptions" "grp:alt_shift_toggle"
EndSection
XKB_EOF

# Create user Xinit config
cat > /home/$USERNAME/.xinitrc <<XINIT_EOF
#!/bin/sh
setxkbmap -layout $KEYMAP,$ADDITIONAL_KEYMAP -option grp:alt_shift_toggle
exec awesome
XINIT_EOF

chown $USERNAME:$USERNAME /home/$USERNAME/.xinitrc
chmod +x /home/$USERNAME/.xinitrc

# Create autostart for user
mkdir -p /home/$USERNAME/.config/awesome/
cat > /home/$USERNAME/.config/awesome/rc.lua <<AWESOME_EOF
-- Base awesome config
awful = require("awful")
require("awful.autofocus")

-- Set wallpaper
local wallpaper = "/usr/share/backgrounds/archlinux/arch-wallpaper.jpg"
if awful.util.file_readable(wallpaper) then
    gears.wallpaper.maximized(wallpaper, nil, true)
end

-- Default modkey
modkey = "Mod4"

-- Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey }, "Return", function () awful.util.spawn("terminal") end),
    -- Alt+Shift for keyboard layout switching
    awful.key({ "Mod1", "Shift" }, "Shift_L", function () 
        awful.util.spawn("setxkbmap -toggle") 
    end)
)

root.keys(globalkeys)
AWESOME_EOF

chown -R $USERNAME:$USERNAME /home/$USERNAME/.config

# --- Virtualization & Containers ---
echo "[CHROOT] Installing virtualization tools..."
pacman -S --noconfirm qemu libvirt virt-manager docker

systemctl enable libvirtd
systemctl enable docker

usermod -aG libvirt $USERNAME
usermod -aG docker $USERNAME

# --- Cleanup & Exit ---
echo "[CHROOT] Installation complete in chroot!"
EOF

# Make chroot script executable and run it
chmod +x /mnt/root/chroot_script.sh
arch-chroot /mnt /root/chroot_script.sh

# --- Cleanup ---
umount -R /mnt
echo "[INFO] Installation complete! You can now reboot into your new system."
